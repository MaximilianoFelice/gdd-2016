using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using Resources.DB_Conn_DSL;
using System.Data.SqlClient;
using ExtensionMethods;
using System.Windows.Forms;

namespace Resources.Home
{
    public class HotelHandler
    {

        /* Defining sql accessors: Snippet Autogenerated */
        private static DataSet _hotels;
        private static SqlDataAdapter _hotels_adapter;
        public static SqlDataAdapter hotels_adapter { get { if ((hotels == null) || true); return _hotels_adapter; } }
        public static DataSet hotels{
            get
            {
                if (_hotels == null)
                {
                    _hotels_adapter = (SqlDataAdapter)new SqlQuery("SELECT * FROM BOBBY_TABLES.ACTIVE_HOTELS;").AsDataAdapter().Execute()["ReturnedValues"];
                    _hotels = new DataSet();
                    _hotels_adapter.Fill(_hotels);
                } 
                return _hotels;
            }
        }

        public static void Update(DataRow aRow)
        {
            hotels_adapter.Update(new DataRow[] {aRow});
        }

        public static void CheckHotelStates()
        {
            new SqlStoredProcedure("[BOBBY_TABLES].CheckMantenienceStatus")
                                .WithParam("@date").As(SqlDbType.DateTime).Value(DateTime.Today)
                                .Execute();
        }

        public static DataSet filteredSearch(String name, int? stars, String city, String country)
        {

            SqlFunction func = new SqlFunction("[BOBBY_TABLES].SP_FILTER_HOTELS")
                                .WithParam("@Name").As(SqlDbType.VarChar).Value(name)
                                .WithParam("@City").As(SqlDbType.VarChar).Value(city)
                                .WithParam("@Country").As(SqlDbType.VarChar).Value(country);

            if (stars == null) {func.WithParam("@Stars").As(SqlDbType.Int).Value(DBNull.Value);}
            else { func.WithParam("@Stars").As(SqlDbType.Int).Value(stars); }

            SqlResults results = func.Execute();


            return (DataSet)results["ReturnedValues"];
        }

        public static HotelHandler newHotel()
        {
            DataRow newHot = hotels.Tables[0].NewRow();
            newHot["id_hotel"] = -1; //Important!! We set -1 for new hotels
            hotels.Tables[0].Rows.Add(newHot);
            return new HotelHandler(newHot);
        }

        public static void deleteHotel(DataRow hotel) {deleteHotel(new HotelHandler(hotel));}
        public static void deleteHotel(HotelHandler hotel)
        {
            hotel.Hotel.Delete();
            _hotels_adapter.Update(new DataRow[] {hotel.Hotel});
        }

        /* Non static members from here */

        private DataRow _hotelRow;
        public DataRow Hotel { get {return _hotelRow;} }

        public Boolean setForManteinance(DateTime start, DateTime end, String descr)
        {
            SqlResults results = new SqlStoredProcedure("[BOBBY_TABLES].SP_HOTEL_MANTEINANCE")
                                 .WithParam("@IdHotel").As(SqlDbType.Int).Value((int) Hotel["id_hotel"])
                                 .WithParam("@Start").As(SqlDbType.DateTime).Value(start)
                                 .WithParam("@End").As(SqlDbType.DateTime).Value(end)
                                 .WithParam("@Descr").As(SqlDbType.VarChar).Value(descr)
                                 .WithParam("@Manteined").As(SqlDbType.Bit).AsOutput()
                                 .Execute();
            return (Boolean)results["@Manteined"];

        }


        /* Defining sql accessors: Snippet Autogenerated */
        private DataSet _regimens;
        private SqlDataAdapter _regimens_adapter;
        public SqlDataAdapter regimens_adapter { get { if ((regimens == null) || true); return _regimens_adapter; } }
        public DataSet regimens{
            get
            {
                if (_regimens == null)
                {
                    _regimens_adapter = (SqlDataAdapter) new SqlQuery("SELECT id_hotel, id_regimen FROM BOBBY_TABLES.REGIMEN_HOTEL where id_hotel = " + Hotel["id_hotel"] ).AsDataAdapter().Execute()["ReturnedValues"];
                    _regimens = new DataSet();
                    _regimens_adapter.Fill(_regimens);
                } 
                return _regimens;
            }
        }
        
        public HotelHandler(DataRow row)
        {
            _hotelRow = row;
        }

        public Boolean HasRegimen(int id_reg)
        {
            return regimens.Tables[0].AsEnumerable().Any(x => (int)x["id_regimen"] == id_reg);
        }

        public object this[String val]
        {
            get { return Hotel[val]; }
            set { Hotel[val] = value; }
        }

        public void Update()
        {
            // Si crea el hotel, primero necesita acomodar algunos valores:
            if ((int)Hotel["id_hotel"] == -1)
            {
                /* Obtiene el ID */
                Hotel["id_Hotel"] = DBNull.Value;
                hotels_adapter.Update(new DataRow[] { Hotel });
                Hotel["id_hotel"] = (int)new SqlQuery("SELECT id_hotel FROM BOBBY_TABLES.HOTELS WHERE name = '" + Hotel["name"] + "';").ExecuteScalar();
                Hotel.AcceptChanges();

                /* Carga todos los regimenes con ese ID */
                regimens.Tables[0].AsEnumerable().IMap(x => x["id_hotel"] = Hotel["id_hotel"]);
            }
            hotels_adapter.Update(new DataRow[] {Hotel});
            regimens_adapter.Update(regimens);
        }

        public void AddRegimen(int id_reg)
        {
            DataRow newR = regimens.Tables[0].NewRow();
            newR["id_hotel"] = Hotel["id_hotel"];
            newR["id_regimen"] = id_reg;

            regimens.Tables[0].Rows.Add(newR);
        }

        public void RemoveRegimen(int id_reg)
        {
            regimens.Tables[0].Select("id_hotel = " + Hotel["id_hotel"] + " AND id_regimen = " + id_reg).IMap(x => x.Delete());
        }

    }
}
